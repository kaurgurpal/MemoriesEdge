#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MemoriesEdgeAdmin.Web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MemoriesEdge")]
	public partial class MemoriesEdgeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCityMaster(CityMaster instance);
    partial void UpdateCityMaster(CityMaster instance);
    partial void DeleteCityMaster(CityMaster instance);
    partial void InsertCountryMaster(CountryMaster instance);
    partial void UpdateCountryMaster(CountryMaster instance);
    partial void DeleteCountryMaster(CountryMaster instance);
    partial void InsertFeedbackAnswerMaster(FeedbackAnswerMaster instance);
    partial void UpdateFeedbackAnswerMaster(FeedbackAnswerMaster instance);
    partial void DeleteFeedbackAnswerMaster(FeedbackAnswerMaster instance);
    partial void InsertFeedbackQuestionMaster(FeedbackQuestionMaster instance);
    partial void UpdateFeedbackQuestionMaster(FeedbackQuestionMaster instance);
    partial void DeleteFeedbackQuestionMaster(FeedbackQuestionMaster instance);
    partial void InsertOperatorMaster(OperatorMaster instance);
    partial void UpdateOperatorMaster(OperatorMaster instance);
    partial void DeleteOperatorMaster(OperatorMaster instance);
    partial void InsertSupportMaster(SupportMaster instance);
    partial void UpdateSupportMaster(SupportMaster instance);
    partial void DeleteSupportMaster(SupportMaster instance);
    partial void InsertStateMaster(StateMaster instance);
    partial void UpdateStateMaster(StateMaster instance);
    partial void DeleteStateMaster(StateMaster instance);
    partial void InsertSecurityQuestionMaster(SecurityQuestionMaster instance);
    partial void UpdateSecurityQuestionMaster(SecurityQuestionMaster instance);
    partial void DeleteSecurityQuestionMaster(SecurityQuestionMaster instance);
    partial void InsertAdvertisementMaster(AdvertisementMaster instance);
    partial void UpdateAdvertisementMaster(AdvertisementMaster instance);
    partial void DeleteAdvertisementMaster(AdvertisementMaster instance);
    partial void InsertAlbumGroupPermission(AlbumGroupPermission instance);
    partial void UpdateAlbumGroupPermission(AlbumGroupPermission instance);
    partial void DeleteAlbumGroupPermission(AlbumGroupPermission instance);
    partial void InsertAlbumImage(AlbumImage instance);
    partial void UpdateAlbumImage(AlbumImage instance);
    partial void DeleteAlbumImage(AlbumImage instance);
    partial void InsertAlbumMaster(AlbumMaster instance);
    partial void UpdateAlbumMaster(AlbumMaster instance);
    partial void DeleteAlbumMaster(AlbumMaster instance);
    partial void InsertDiscussionMaster(DiscussionMaster instance);
    partial void UpdateDiscussionMaster(DiscussionMaster instance);
    partial void DeleteDiscussionMaster(DiscussionMaster instance);
    partial void InsertDiscussionResponse(DiscussionResponse instance);
    partial void UpdateDiscussionResponse(DiscussionResponse instance);
    partial void DeleteDiscussionResponse(DiscussionResponse instance);
    partial void InsertFAQMaster(FAQMaster instance);
    partial void UpdateFAQMaster(FAQMaster instance);
    partial void DeleteFAQMaster(FAQMaster instance);
    partial void InsertFriendMaster(FriendMaster instance);
    partial void UpdateFriendMaster(FriendMaster instance);
    partial void DeleteFriendMaster(FriendMaster instance);
    partial void InsertFriendRequest(FriendRequest instance);
    partial void UpdateFriendRequest(FriendRequest instance);
    partial void DeleteFriendRequest(FriendRequest instance);
    partial void InsertGroupMaster(GroupMaster instance);
    partial void UpdateGroupMaster(GroupMaster instance);
    partial void DeleteGroupMaster(GroupMaster instance);
    partial void InsertGroupMember(GroupMember instance);
    partial void UpdateGroupMember(GroupMember instance);
    partial void DeleteGroupMember(GroupMember instance);
    partial void InsertImageComment(ImageComment instance);
    partial void UpdateImageComment(ImageComment instance);
    partial void DeleteImageComment(ImageComment instance);
    partial void InsertNewsletterMaster(NewsletterMaster instance);
    partial void UpdateNewsletterMaster(NewsletterMaster instance);
    partial void DeleteNewsletterMaster(NewsletterMaster instance);
    partial void InsertOperatorAddress(OperatorAddress instance);
    partial void UpdateOperatorAddress(OperatorAddress instance);
    partial void DeleteOperatorAddress(OperatorAddress instance);
    partial void InsertRequestMaster(RequestMaster instance);
    partial void UpdateRequestMaster(RequestMaster instance);
    partial void DeleteRequestMaster(RequestMaster instance);
    partial void InsertResponseMaster(ResponseMaster instance);
    partial void UpdateResponseMaster(ResponseMaster instance);
    partial void DeleteResponseMaster(ResponseMaster instance);
    partial void InsertSupportResponse(SupportResponse instance);
    partial void UpdateSupportResponse(SupportResponse instance);
    partial void DeleteSupportResponse(SupportResponse instance);
    partial void InsertSupportTypeMaster(SupportTypeMaster instance);
    partial void UpdateSupportTypeMaster(SupportTypeMaster instance);
    partial void DeleteSupportTypeMaster(SupportTypeMaster instance);
    partial void InsertThemeMaster(ThemeMaster instance);
    partial void UpdateThemeMaster(ThemeMaster instance);
    partial void DeleteThemeMaster(ThemeMaster instance);
    partial void InsertUserAddress(UserAddress instance);
    partial void UpdateUserAddress(UserAddress instance);
    partial void DeleteUserAddress(UserAddress instance);
    partial void InsertUserDetail(UserDetail instance);
    partial void UpdateUserDetail(UserDetail instance);
    partial void DeleteUserDetail(UserDetail instance);
    partial void InsertUserFeedbackDetail(UserFeedbackDetail instance);
    partial void UpdateUserFeedbackDetail(UserFeedbackDetail instance);
    partial void DeleteUserFeedbackDetail(UserFeedbackDetail instance);
    partial void InsertUserFeedbackMaster(UserFeedbackMaster instance);
    partial void UpdateUserFeedbackMaster(UserFeedbackMaster instance);
    partial void DeleteUserFeedbackMaster(UserFeedbackMaster instance);
    partial void InsertUserImage(UserImage instance);
    partial void UpdateUserImage(UserImage instance);
    partial void DeleteUserImage(UserImage instance);
    partial void InsertUserMaster(UserMaster instance);
    partial void UpdateUserMaster(UserMaster instance);
    partial void DeleteUserMaster(UserMaster instance);
    partial void InsertUserTheme(UserTheme instance);
    partial void UpdateUserTheme(UserTheme instance);
    partial void DeleteUserTheme(UserTheme instance);
    #endregion
		
		public MemoriesEdgeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MemoriesEdgeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MemoriesEdgeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemoriesEdgeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemoriesEdgeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemoriesEdgeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CityMaster> CityMasters
		{
			get
			{
				return this.GetTable<CityMaster>();
			}
		}
		
		public System.Data.Linq.Table<CountryMaster> CountryMasters
		{
			get
			{
				return this.GetTable<CountryMaster>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackAnswerMaster> FeedbackAnswerMasters
		{
			get
			{
				return this.GetTable<FeedbackAnswerMaster>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackQuestionMaster> FeedbackQuestionMasters
		{
			get
			{
				return this.GetTable<FeedbackQuestionMaster>();
			}
		}
		
		public System.Data.Linq.Table<OperatorMaster> OperatorMasters
		{
			get
			{
				return this.GetTable<OperatorMaster>();
			}
		}
		
		public System.Data.Linq.Table<SupportMaster> SupportMasters
		{
			get
			{
				return this.GetTable<SupportMaster>();
			}
		}
		
		public System.Data.Linq.Table<StateMaster> StateMasters
		{
			get
			{
				return this.GetTable<StateMaster>();
			}
		}
		
		public System.Data.Linq.Table<SecurityQuestionMaster> SecurityQuestionMasters
		{
			get
			{
				return this.GetTable<SecurityQuestionMaster>();
			}
		}
		
		public System.Data.Linq.Table<AdvertisementMaster> AdvertisementMasters
		{
			get
			{
				return this.GetTable<AdvertisementMaster>();
			}
		}
		
		public System.Data.Linq.Table<AlbumGroupPermission> AlbumGroupPermissions
		{
			get
			{
				return this.GetTable<AlbumGroupPermission>();
			}
		}
		
		public System.Data.Linq.Table<AlbumImage> AlbumImages
		{
			get
			{
				return this.GetTable<AlbumImage>();
			}
		}
		
		public System.Data.Linq.Table<AlbumMaster> AlbumMasters
		{
			get
			{
				return this.GetTable<AlbumMaster>();
			}
		}
		
		public System.Data.Linq.Table<DiscussionMaster> DiscussionMasters
		{
			get
			{
				return this.GetTable<DiscussionMaster>();
			}
		}
		
		public System.Data.Linq.Table<DiscussionResponse> DiscussionResponses
		{
			get
			{
				return this.GetTable<DiscussionResponse>();
			}
		}
		
		public System.Data.Linq.Table<FAQMaster> FAQMasters
		{
			get
			{
				return this.GetTable<FAQMaster>();
			}
		}
		
		public System.Data.Linq.Table<FriendMaster> FriendMasters
		{
			get
			{
				return this.GetTable<FriendMaster>();
			}
		}
		
		public System.Data.Linq.Table<FriendRequest> FriendRequests
		{
			get
			{
				return this.GetTable<FriendRequest>();
			}
		}
		
		public System.Data.Linq.Table<GroupMaster> GroupMasters
		{
			get
			{
				return this.GetTable<GroupMaster>();
			}
		}
		
		public System.Data.Linq.Table<GroupMember> GroupMembers
		{
			get
			{
				return this.GetTable<GroupMember>();
			}
		}
		
		public System.Data.Linq.Table<ImageComment> ImageComments
		{
			get
			{
				return this.GetTable<ImageComment>();
			}
		}
		
		public System.Data.Linq.Table<NewsletterMaster> NewsletterMasters
		{
			get
			{
				return this.GetTable<NewsletterMaster>();
			}
		}
		
		public System.Data.Linq.Table<OperatorAddress> OperatorAddresses
		{
			get
			{
				return this.GetTable<OperatorAddress>();
			}
		}
		
		public System.Data.Linq.Table<RequestMaster> RequestMasters
		{
			get
			{
				return this.GetTable<RequestMaster>();
			}
		}
		
		public System.Data.Linq.Table<ResponseMaster> ResponseMasters
		{
			get
			{
				return this.GetTable<ResponseMaster>();
			}
		}
		
		public System.Data.Linq.Table<SupportResponse> SupportResponses
		{
			get
			{
				return this.GetTable<SupportResponse>();
			}
		}
		
		public System.Data.Linq.Table<SupportTypeMaster> SupportTypeMasters
		{
			get
			{
				return this.GetTable<SupportTypeMaster>();
			}
		}
		
		public System.Data.Linq.Table<ThemeMaster> ThemeMasters
		{
			get
			{
				return this.GetTable<ThemeMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserAddress> UserAddresses
		{
			get
			{
				return this.GetTable<UserAddress>();
			}
		}
		
		public System.Data.Linq.Table<UserDetail> UserDetails
		{
			get
			{
				return this.GetTable<UserDetail>();
			}
		}
		
		public System.Data.Linq.Table<UserFeedbackDetail> UserFeedbackDetails
		{
			get
			{
				return this.GetTable<UserFeedbackDetail>();
			}
		}
		
		public System.Data.Linq.Table<UserFeedbackMaster> UserFeedbackMasters
		{
			get
			{
				return this.GetTable<UserFeedbackMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserImage> UserImages
		{
			get
			{
				return this.GetTable<UserImage>();
			}
		}
		
		public System.Data.Linq.Table<UserMaster> UserMasters
		{
			get
			{
				return this.GetTable<UserMaster>();
			}
		}
		
		public System.Data.Linq.Table<UserTheme> UserThemes
		{
			get
			{
				return this.GetTable<UserTheme>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityMaster")]
	public partial class CityMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _City_ID;
		
		private System.Nullable<int> _State_ID;
		
		private string _City;
		
		private System.Nullable<bool> _Status;
		
		private EntityRef<StateMaster> _StateMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCity_IDChanging(int value);
    partial void OnCity_IDChanged();
    partial void OnState_IDChanging(System.Nullable<int> value);
    partial void OnState_IDChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public CityMaster()
		{
			this._StateMaster = default(EntityRef<StateMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					if (this._StateMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnState_IDChanging(value);
					this.SendPropertyChanging();
					this._State_ID = value;
					this.SendPropertyChanged("State_ID");
					this.OnState_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_CityMaster", Storage="_StateMaster", ThisKey="State_ID", OtherKey="State_ID", IsForeignKey=true)]
		public StateMaster StateMaster
		{
			get
			{
				return this._StateMaster.Entity;
			}
			set
			{
				StateMaster previousValue = this._StateMaster.Entity;
				if (((previousValue != value) 
							|| (this._StateMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateMaster.Entity = null;
						previousValue.CityMasters.Remove(this);
					}
					this._StateMaster.Entity = value;
					if ((value != null))
					{
						value.CityMasters.Add(this);
						this._State_ID = value.State_ID;
					}
					else
					{
						this._State_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("StateMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryMaster")]
	public partial class CountryMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Country_ID;
		
		private string _Country;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<StateMaster> _StateMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountry_IDChanging(int value);
    partial void OnCountry_IDChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public CountryMaster()
		{
			this._StateMasters = new EntitySet<StateMaster>(new Action<StateMaster>(this.attach_StateMasters), new Action<StateMaster>(this.detach_StateMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_StateMasters", ThisKey="Country_ID", OtherKey="Country_ID")]
		public EntitySet<StateMaster> StateMasters
		{
			get
			{
				return this._StateMasters;
			}
			set
			{
				this._StateMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = this;
		}
		
		private void detach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackAnswerMaster")]
	public partial class FeedbackAnswerMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Feedback_Answer_ID;
		
		private System.Nullable<int> _Feedback_Question_ID;
		
		private string _Feedback_Answer;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<UserFeedbackDetail> _UserFeedbackDetails;
		
		private EntityRef<FeedbackQuestionMaster> _FeedbackQuestionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedback_Answer_IDChanging(int value);
    partial void OnFeedback_Answer_IDChanged();
    partial void OnFeedback_Question_IDChanging(System.Nullable<int> value);
    partial void OnFeedback_Question_IDChanged();
    partial void OnFeedback_AnswerChanging(string value);
    partial void OnFeedback_AnswerChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public FeedbackAnswerMaster()
		{
			this._UserFeedbackDetails = new EntitySet<UserFeedbackDetail>(new Action<UserFeedbackDetail>(this.attach_UserFeedbackDetails), new Action<UserFeedbackDetail>(this.detach_UserFeedbackDetails));
			this._FeedbackQuestionMaster = default(EntityRef<FeedbackQuestionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Answer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Feedback_Answer_ID
		{
			get
			{
				return this._Feedback_Answer_ID;
			}
			set
			{
				if ((this._Feedback_Answer_ID != value))
				{
					this.OnFeedback_Answer_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Answer_ID = value;
					this.SendPropertyChanged("Feedback_Answer_ID");
					this.OnFeedback_Answer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Question_ID", DbType="Int")]
		public System.Nullable<int> Feedback_Question_ID
		{
			get
			{
				return this._Feedback_Question_ID;
			}
			set
			{
				if ((this._Feedback_Question_ID != value))
				{
					if (this._FeedbackQuestionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedback_Question_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Question_ID = value;
					this.SendPropertyChanged("Feedback_Question_ID");
					this.OnFeedback_Question_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Answer", DbType="VarChar(500)")]
		public string Feedback_Answer
		{
			get
			{
				return this._Feedback_Answer;
			}
			set
			{
				if ((this._Feedback_Answer != value))
				{
					this.OnFeedback_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Answer = value;
					this.SendPropertyChanged("Feedback_Answer");
					this.OnFeedback_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackAnswerMaster_UserFeedbackDetail", Storage="_UserFeedbackDetails", ThisKey="Feedback_Answer_ID", OtherKey="Feedback_Answer_ID")]
		public EntitySet<UserFeedbackDetail> UserFeedbackDetails
		{
			get
			{
				return this._UserFeedbackDetails;
			}
			set
			{
				this._UserFeedbackDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackQuestionMaster_FeedbackAnswerMaster", Storage="_FeedbackQuestionMaster", ThisKey="Feedback_Question_ID", OtherKey="Feedback_Question_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public FeedbackQuestionMaster FeedbackQuestionMaster
		{
			get
			{
				return this._FeedbackQuestionMaster.Entity;
			}
			set
			{
				FeedbackQuestionMaster previousValue = this._FeedbackQuestionMaster.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackQuestionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackQuestionMaster.Entity = null;
						previousValue.FeedbackAnswerMasters.Remove(this);
					}
					this._FeedbackQuestionMaster.Entity = value;
					if ((value != null))
					{
						value.FeedbackAnswerMasters.Add(this);
						this._Feedback_Question_ID = value.Feedback_Question_ID;
					}
					else
					{
						this._Feedback_Question_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FeedbackQuestionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackAnswerMaster = this;
		}
		
		private void detach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackAnswerMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackQuestionMaster")]
	public partial class FeedbackQuestionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Feedback_Question_ID;
		
		private string _Feedback_Question;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<FeedbackAnswerMaster> _FeedbackAnswerMasters;
		
		private EntitySet<UserFeedbackDetail> _UserFeedbackDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedback_Question_IDChanging(int value);
    partial void OnFeedback_Question_IDChanged();
    partial void OnFeedback_QuestionChanging(string value);
    partial void OnFeedback_QuestionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public FeedbackQuestionMaster()
		{
			this._FeedbackAnswerMasters = new EntitySet<FeedbackAnswerMaster>(new Action<FeedbackAnswerMaster>(this.attach_FeedbackAnswerMasters), new Action<FeedbackAnswerMaster>(this.detach_FeedbackAnswerMasters));
			this._UserFeedbackDetails = new EntitySet<UserFeedbackDetail>(new Action<UserFeedbackDetail>(this.attach_UserFeedbackDetails), new Action<UserFeedbackDetail>(this.detach_UserFeedbackDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Question_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Feedback_Question_ID
		{
			get
			{
				return this._Feedback_Question_ID;
			}
			set
			{
				if ((this._Feedback_Question_ID != value))
				{
					this.OnFeedback_Question_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Question_ID = value;
					this.SendPropertyChanged("Feedback_Question_ID");
					this.OnFeedback_Question_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Question", DbType="VarChar(200)")]
		public string Feedback_Question
		{
			get
			{
				return this._Feedback_Question;
			}
			set
			{
				if ((this._Feedback_Question != value))
				{
					this.OnFeedback_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Question = value;
					this.SendPropertyChanged("Feedback_Question");
					this.OnFeedback_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackQuestionMaster_FeedbackAnswerMaster", Storage="_FeedbackAnswerMasters", ThisKey="Feedback_Question_ID", OtherKey="Feedback_Question_ID")]
		public EntitySet<FeedbackAnswerMaster> FeedbackAnswerMasters
		{
			get
			{
				return this._FeedbackAnswerMasters;
			}
			set
			{
				this._FeedbackAnswerMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackQuestionMaster_UserFeedbackDetail", Storage="_UserFeedbackDetails", ThisKey="Feedback_Question_ID", OtherKey="Feedback_Question_ID")]
		public EntitySet<UserFeedbackDetail> UserFeedbackDetails
		{
			get
			{
				return this._UserFeedbackDetails;
			}
			set
			{
				this._UserFeedbackDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeedbackAnswerMasters(FeedbackAnswerMaster entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackQuestionMaster = this;
		}
		
		private void detach_FeedbackAnswerMasters(FeedbackAnswerMaster entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackQuestionMaster = null;
		}
		
		private void attach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackQuestionMaster = this;
		}
		
		private void detach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackQuestionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorMaster")]
	public partial class OperatorMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Operator_ID;
		
		private string _User_Name;
		
		private string _User_Password;
		
		private System.Nullable<System.DateTime> _Last_Login;
		
		private string _User_Status;
		
		private string _Initial;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Gender;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Email_ID;
		
		private EntityRef<OperatorAddress> _OperatorAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperator_IDChanging(int value);
    partial void OnOperator_IDChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    partial void OnLast_LoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_LoginChanged();
    partial void OnUser_StatusChanging(string value);
    partial void OnUser_StatusChanged();
    partial void OnInitialChanging(string value);
    partial void OnInitialChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    #endregion
		
		public OperatorMaster()
		{
			this._OperatorAddress = default(EntityRef<OperatorAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Operator_ID
		{
			get
			{
				return this._Operator_ID;
			}
			set
			{
				if ((this._Operator_ID != value))
				{
					this.OnOperator_IDChanging(value);
					this.SendPropertyChanging();
					this._Operator_ID = value;
					this.SendPropertyChanged("Operator_ID");
					this.OnOperator_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50)")]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="VarChar(50)")]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Login", DbType="DateTime")]
		public System.Nullable<System.DateTime> Last_Login
		{
			get
			{
				return this._Last_Login;
			}
			set
			{
				if ((this._Last_Login != value))
				{
					this.OnLast_LoginChanging(value);
					this.SendPropertyChanging();
					this._Last_Login = value;
					this.SendPropertyChanged("Last_Login");
					this.OnLast_LoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Status", DbType="VarChar(2)")]
		public string User_Status
		{
			get
			{
				return this._User_Status;
			}
			set
			{
				if ((this._User_Status != value))
				{
					this.OnUser_StatusChanging(value);
					this.SendPropertyChanging();
					this._User_Status = value;
					this.SendPropertyChanged("User_Status");
					this.OnUser_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial", DbType="VarChar(5)")]
		public string Initial
		{
			get
			{
				return this._Initial;
			}
			set
			{
				if ((this._Initial != value))
				{
					this.OnInitialChanging(value);
					this.SendPropertyChanging();
					this._Initial = value;
					this.SendPropertyChanged("Initial");
					this.OnInitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(100)")]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorMaster_OperatorAddress", Storage="_OperatorAddress", ThisKey="Operator_ID", OtherKey="Operator_ID", IsUnique=true, IsForeignKey=false)]
		public OperatorAddress OperatorAddress
		{
			get
			{
				return this._OperatorAddress.Entity;
			}
			set
			{
				OperatorAddress previousValue = this._OperatorAddress.Entity;
				if (((previousValue != value) 
							|| (this._OperatorAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorAddress.Entity = null;
						previousValue.OperatorMaster = null;
					}
					this._OperatorAddress.Entity = value;
					if ((value != null))
					{
						value.OperatorMaster = this;
					}
					this.SendPropertyChanged("OperatorAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupportMaster")]
	public partial class SupportMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Support_ID;
		
		private System.Nullable<int> _Support_Type_ID;
		
		private string _Name;
		
		private string _Email_ID;
		
		private string _Phone;
		
		private string _Query;
		
		private System.Nullable<System.DateTime> _Submit_Date;
		
		private string _Support_Status;
		
		private EntitySet<SupportResponse> _SupportResponses;
		
		private EntityRef<SupportTypeMaster> _SupportTypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupport_IDChanging(int value);
    partial void OnSupport_IDChanged();
    partial void OnSupport_Type_IDChanging(System.Nullable<int> value);
    partial void OnSupport_Type_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnQueryChanging(string value);
    partial void OnQueryChanged();
    partial void OnSubmit_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmit_DateChanged();
    partial void OnSupport_StatusChanging(string value);
    partial void OnSupport_StatusChanged();
    #endregion
		
		public SupportMaster()
		{
			this._SupportResponses = new EntitySet<SupportResponse>(new Action<SupportResponse>(this.attach_SupportResponses), new Action<SupportResponse>(this.detach_SupportResponses));
			this._SupportTypeMaster = default(EntityRef<SupportTypeMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Support_ID
		{
			get
			{
				return this._Support_ID;
			}
			set
			{
				if ((this._Support_ID != value))
				{
					this.OnSupport_IDChanging(value);
					this.SendPropertyChanging();
					this._Support_ID = value;
					this.SendPropertyChanged("Support_ID");
					this.OnSupport_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_Type_ID", DbType="Int")]
		public System.Nullable<int> Support_Type_ID
		{
			get
			{
				return this._Support_Type_ID;
			}
			set
			{
				if ((this._Support_Type_ID != value))
				{
					if (this._SupportTypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupport_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Support_Type_ID = value;
					this.SendPropertyChanged("Support_Type_ID");
					this.OnSupport_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(100)")]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(30)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Query", DbType="VarChar(MAX)")]
		public string Query
		{
			get
			{
				return this._Query;
			}
			set
			{
				if ((this._Query != value))
				{
					this.OnQueryChanging(value);
					this.SendPropertyChanging();
					this._Query = value;
					this.SendPropertyChanged("Query");
					this.OnQueryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Submit_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Submit_Date
		{
			get
			{
				return this._Submit_Date;
			}
			set
			{
				if ((this._Submit_Date != value))
				{
					this.OnSubmit_DateChanging(value);
					this.SendPropertyChanging();
					this._Submit_Date = value;
					this.SendPropertyChanged("Submit_Date");
					this.OnSubmit_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_Status", DbType="VarChar(20)")]
		public string Support_Status
		{
			get
			{
				return this._Support_Status;
			}
			set
			{
				if ((this._Support_Status != value))
				{
					this.OnSupport_StatusChanging(value);
					this.SendPropertyChanging();
					this._Support_Status = value;
					this.SendPropertyChanged("Support_Status");
					this.OnSupport_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupportMaster_SupportResponse", Storage="_SupportResponses", ThisKey="Support_ID", OtherKey="Support_ID")]
		public EntitySet<SupportResponse> SupportResponses
		{
			get
			{
				return this._SupportResponses;
			}
			set
			{
				this._SupportResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupportTypeMaster_SupportMaster", Storage="_SupportTypeMaster", ThisKey="Support_Type_ID", OtherKey="Support_Type_ID", IsForeignKey=true)]
		public SupportTypeMaster SupportTypeMaster
		{
			get
			{
				return this._SupportTypeMaster.Entity;
			}
			set
			{
				SupportTypeMaster previousValue = this._SupportTypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._SupportTypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupportTypeMaster.Entity = null;
						previousValue.SupportMasters.Remove(this);
					}
					this._SupportTypeMaster.Entity = value;
					if ((value != null))
					{
						value.SupportMasters.Add(this);
						this._Support_Type_ID = value.Support_Type_ID;
					}
					else
					{
						this._Support_Type_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SupportTypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupportResponses(SupportResponse entity)
		{
			this.SendPropertyChanging();
			entity.SupportMaster = this;
		}
		
		private void detach_SupportResponses(SupportResponse entity)
		{
			this.SendPropertyChanging();
			entity.SupportMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateMaster")]
	public partial class StateMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _State_ID;
		
		private System.Nullable<int> _Country_ID;
		
		private string _State;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<CityMaster> _CityMasters;
		
		private EntityRef<CountryMaster> _CountryMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnState_IDChanging(int value);
    partial void OnState_IDChanged();
    partial void OnCountry_IDChanging(System.Nullable<int> value);
    partial void OnCountry_IDChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public StateMaster()
		{
			this._CityMasters = new EntitySet<CityMaster>(new Action<CityMaster>(this.attach_CityMasters), new Action<CityMaster>(this.detach_CityMasters));
			this._CountryMaster = default(EntityRef<CountryMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this.OnState_IDChanging(value);
					this.SendPropertyChanging();
					this._State_ID = value;
					this.SendPropertyChanged("State_ID");
					this.OnState_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_ID", DbType="Int")]
		public System.Nullable<int> Country_ID
		{
			get
			{
				return this._Country_ID;
			}
			set
			{
				if ((this._Country_ID != value))
				{
					if (this._CountryMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountry_IDChanging(value);
					this.SendPropertyChanging();
					this._Country_ID = value;
					this.SendPropertyChanged("Country_ID");
					this.OnCountry_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(100)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_CityMaster", Storage="_CityMasters", ThisKey="State_ID", OtherKey="State_ID")]
		public EntitySet<CityMaster> CityMasters
		{
			get
			{
				return this._CityMasters;
			}
			set
			{
				this._CityMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_CountryMaster", ThisKey="Country_ID", OtherKey="Country_ID", IsForeignKey=true)]
		public CountryMaster CountryMaster
		{
			get
			{
				return this._CountryMaster.Entity;
			}
			set
			{
				CountryMaster previousValue = this._CountryMaster.Entity;
				if (((previousValue != value) 
							|| (this._CountryMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryMaster.Entity = null;
						previousValue.StateMasters.Remove(this);
					}
					this._CountryMaster.Entity = value;
					if ((value != null))
					{
						value.StateMasters.Add(this);
						this._Country_ID = value.Country_ID;
					}
					else
					{
						this._Country_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CountryMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CityMasters(CityMaster entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = this;
		}
		
		private void detach_CityMasters(CityMaster entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityQuestionMaster")]
	public partial class SecurityQuestionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Security_Question_ID;
		
		private string _Security_Question;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<UserMaster> _UserMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurity_Question_IDChanging(int value);
    partial void OnSecurity_Question_IDChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public SecurityQuestionMaster()
		{
			this._UserMasters = new EntitySet<UserMaster>(new Action<UserMaster>(this.attach_UserMasters), new Action<UserMaster>(this.detach_UserMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Security_Question_ID
		{
			get
			{
				return this._Security_Question_ID;
			}
			set
			{
				if ((this._Security_Question_ID != value))
				{
					this.OnSecurity_Question_IDChanging(value);
					this.SendPropertyChanging();
					this._Security_Question_ID = value;
					this.SendPropertyChanged("Security_Question_ID");
					this.OnSecurity_Question_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(MAX)")]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityQuestionMaster_UserMaster", Storage="_UserMasters", ThisKey="Security_Question_ID", OtherKey="Security_Question_ID")]
		public EntitySet<UserMaster> UserMasters
		{
			get
			{
				return this._UserMasters;
			}
			set
			{
				this._UserMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserMasters(UserMaster entity)
		{
			this.SendPropertyChanging();
			entity.SecurityQuestionMaster = this;
		}
		
		private void detach_UserMasters(UserMaster entity)
		{
			this.SendPropertyChanging();
			entity.SecurityQuestionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdvertisementMaster")]
	public partial class AdvertisementMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Advertisement_ID;
		
		private string _Advertisement_Title;
		
		private string _Alternate_Text;
		
		private string _Navigate_URL;
		
		private string _Image_URL;
		
		private string _Keywords;
		
		private System.Nullable<int> _Impressions;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdvertisement_IDChanging(int value);
    partial void OnAdvertisement_IDChanged();
    partial void OnAdvertisement_TitleChanging(string value);
    partial void OnAdvertisement_TitleChanged();
    partial void OnAlternate_TextChanging(string value);
    partial void OnAlternate_TextChanged();
    partial void OnNavigate_URLChanging(string value);
    partial void OnNavigate_URLChanged();
    partial void OnImage_URLChanging(string value);
    partial void OnImage_URLChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnImpressionsChanging(System.Nullable<int> value);
    partial void OnImpressionsChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public AdvertisementMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advertisement_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Advertisement_ID
		{
			get
			{
				return this._Advertisement_ID;
			}
			set
			{
				if ((this._Advertisement_ID != value))
				{
					this.OnAdvertisement_IDChanging(value);
					this.SendPropertyChanging();
					this._Advertisement_ID = value;
					this.SendPropertyChanged("Advertisement_ID");
					this.OnAdvertisement_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advertisement_Title", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Advertisement_Title
		{
			get
			{
				return this._Advertisement_Title;
			}
			set
			{
				if ((this._Advertisement_Title != value))
				{
					this.OnAdvertisement_TitleChanging(value);
					this.SendPropertyChanging();
					this._Advertisement_Title = value;
					this.SendPropertyChanged("Advertisement_Title");
					this.OnAdvertisement_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alternate_Text", DbType="VarChar(200)")]
		public string Alternate_Text
		{
			get
			{
				return this._Alternate_Text;
			}
			set
			{
				if ((this._Alternate_Text != value))
				{
					this.OnAlternate_TextChanging(value);
					this.SendPropertyChanging();
					this._Alternate_Text = value;
					this.SendPropertyChanged("Alternate_Text");
					this.OnAlternate_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Navigate_URL", DbType="VarChar(500)")]
		public string Navigate_URL
		{
			get
			{
				return this._Navigate_URL;
			}
			set
			{
				if ((this._Navigate_URL != value))
				{
					this.OnNavigate_URLChanging(value);
					this.SendPropertyChanging();
					this._Navigate_URL = value;
					this.SendPropertyChanged("Navigate_URL");
					this.OnNavigate_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_URL", DbType="VarChar(500)")]
		public string Image_URL
		{
			get
			{
				return this._Image_URL;
			}
			set
			{
				if ((this._Image_URL != value))
				{
					this.OnImage_URLChanging(value);
					this.SendPropertyChanging();
					this._Image_URL = value;
					this.SendPropertyChanged("Image_URL");
					this.OnImage_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="VarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Impressions", DbType="Int")]
		public System.Nullable<int> Impressions
		{
			get
			{
				return this._Impressions;
			}
			set
			{
				if ((this._Impressions != value))
				{
					this.OnImpressionsChanging(value);
					this.SendPropertyChanging();
					this._Impressions = value;
					this.SendPropertyChanged("Impressions");
					this.OnImpressionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumGroupPermissions")]
	public partial class AlbumGroupPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Album_ID;
		
		private int _Group_ID;
		
		private bool _Can_Copy;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntityRef<AlbumMaster> _AlbumMaster;
		
		private EntityRef<GroupMaster> _GroupMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbum_IDChanging(int value);
    partial void OnAlbum_IDChanged();
    partial void OnGroup_IDChanging(int value);
    partial void OnGroup_IDChanged();
    partial void OnCan_CopyChanging(bool value);
    partial void OnCan_CopyChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public AlbumGroupPermission()
		{
			this._AlbumMaster = default(EntityRef<AlbumMaster>);
			this._GroupMaster = default(EntityRef<GroupMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Album_ID
		{
			get
			{
				return this._Album_ID;
			}
			set
			{
				if ((this._Album_ID != value))
				{
					if (this._AlbumMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbum_IDChanging(value);
					this.SendPropertyChanging();
					this._Album_ID = value;
					this.SendPropertyChanged("Album_ID");
					this.OnAlbum_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					if (this._GroupMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Can_Copy", DbType="Bit NOT NULL")]
		public bool Can_Copy
		{
			get
			{
				return this._Can_Copy;
			}
			set
			{
				if ((this._Can_Copy != value))
				{
					this.OnCan_CopyChanging(value);
					this.SendPropertyChanging();
					this._Can_Copy = value;
					this.SendPropertyChanged("Can_Copy");
					this.OnCan_CopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumMaster_AlbumGroupPermission", Storage="_AlbumMaster", ThisKey="Album_ID", OtherKey="Album_ID", IsForeignKey=true)]
		public AlbumMaster AlbumMaster
		{
			get
			{
				return this._AlbumMaster.Entity;
			}
			set
			{
				AlbumMaster previousValue = this._AlbumMaster.Entity;
				if (((previousValue != value) 
							|| (this._AlbumMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlbumMaster.Entity = null;
						previousValue.AlbumGroupPermissions.Remove(this);
					}
					this._AlbumMaster.Entity = value;
					if ((value != null))
					{
						value.AlbumGroupPermissions.Add(this);
						this._Album_ID = value.Album_ID;
					}
					else
					{
						this._Album_ID = default(int);
					}
					this.SendPropertyChanged("AlbumMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupMaster_AlbumGroupPermission", Storage="_GroupMaster", ThisKey="Group_ID", OtherKey="Group_ID", IsForeignKey=true)]
		public GroupMaster GroupMaster
		{
			get
			{
				return this._GroupMaster.Entity;
			}
			set
			{
				GroupMaster previousValue = this._GroupMaster.Entity;
				if (((previousValue != value) 
							|| (this._GroupMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupMaster.Entity = null;
						previousValue.AlbumGroupPermissions.Remove(this);
					}
					this._GroupMaster.Entity = value;
					if ((value != null))
					{
						value.AlbumGroupPermissions.Add(this);
						this._Group_ID = value.Group_ID;
					}
					else
					{
						this._Group_ID = default(int);
					}
					this.SendPropertyChanged("GroupMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumImages")]
	public partial class AlbumImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Image_ID;
		
		private string _Image_Title;
		
		private string _Image_Path;
		
		private System.Nullable<int> _Album_ID;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private EntitySet<ImageComment> _ImageComments;
		
		private EntityRef<AlbumMaster> _AlbumMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImage_IDChanging(decimal value);
    partial void OnImage_IDChanged();
    partial void OnImage_TitleChanging(string value);
    partial void OnImage_TitleChanged();
    partial void OnImage_PathChanging(string value);
    partial void OnImage_PathChanged();
    partial void OnAlbum_IDChanging(System.Nullable<int> value);
    partial void OnAlbum_IDChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public AlbumImage()
		{
			this._ImageComments = new EntitySet<ImageComment>(new Action<ImageComment>(this.attach_ImageComments), new Action<ImageComment>(this.detach_ImageComments));
			this._AlbumMaster = default(EntityRef<AlbumMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(20,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Image_ID
		{
			get
			{
				return this._Image_ID;
			}
			set
			{
				if ((this._Image_ID != value))
				{
					this.OnImage_IDChanging(value);
					this.SendPropertyChanging();
					this._Image_ID = value;
					this.SendPropertyChanged("Image_ID");
					this.OnImage_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Title", DbType="VarChar(200)")]
		public string Image_Title
		{
			get
			{
				return this._Image_Title;
			}
			set
			{
				if ((this._Image_Title != value))
				{
					this.OnImage_TitleChanging(value);
					this.SendPropertyChanging();
					this._Image_Title = value;
					this.SendPropertyChanged("Image_Title");
					this.OnImage_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Path", DbType="VarChar(500)")]
		public string Image_Path
		{
			get
			{
				return this._Image_Path;
			}
			set
			{
				if ((this._Image_Path != value))
				{
					this.OnImage_PathChanging(value);
					this.SendPropertyChanging();
					this._Image_Path = value;
					this.SendPropertyChanged("Image_Path");
					this.OnImage_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_ID", DbType="Int")]
		public System.Nullable<int> Album_ID
		{
			get
			{
				return this._Album_ID;
			}
			set
			{
				if ((this._Album_ID != value))
				{
					if (this._AlbumMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbum_IDChanging(value);
					this.SendPropertyChanging();
					this._Album_ID = value;
					this.SendPropertyChanged("Album_ID");
					this.OnAlbum_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumImage_ImageComment", Storage="_ImageComments", ThisKey="Image_ID", OtherKey="Image_ID")]
		public EntitySet<ImageComment> ImageComments
		{
			get
			{
				return this._ImageComments;
			}
			set
			{
				this._ImageComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumMaster_AlbumImage", Storage="_AlbumMaster", ThisKey="Album_ID", OtherKey="Album_ID", IsForeignKey=true)]
		public AlbumMaster AlbumMaster
		{
			get
			{
				return this._AlbumMaster.Entity;
			}
			set
			{
				AlbumMaster previousValue = this._AlbumMaster.Entity;
				if (((previousValue != value) 
							|| (this._AlbumMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlbumMaster.Entity = null;
						previousValue.AlbumImages.Remove(this);
					}
					this._AlbumMaster.Entity = value;
					if ((value != null))
					{
						value.AlbumImages.Add(this);
						this._Album_ID = value.Album_ID;
					}
					else
					{
						this._Album_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AlbumMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.AlbumImage = this;
		}
		
		private void detach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.AlbumImage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlbumMaster")]
	public partial class AlbumMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Album_ID;
		
		private string _Album_Title;
		
		private string _Album_Description;
		
		private string _Cover_Image_Path;
		
		private System.Nullable<int> _User_ID;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntitySet<AlbumGroupPermission> _AlbumGroupPermissions;
		
		private EntitySet<AlbumImage> _AlbumImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbum_IDChanging(int value);
    partial void OnAlbum_IDChanged();
    partial void OnAlbum_TitleChanging(string value);
    partial void OnAlbum_TitleChanged();
    partial void OnAlbum_DescriptionChanging(string value);
    partial void OnAlbum_DescriptionChanged();
    partial void OnCover_Image_PathChanging(string value);
    partial void OnCover_Image_PathChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public AlbumMaster()
		{
			this._AlbumGroupPermissions = new EntitySet<AlbumGroupPermission>(new Action<AlbumGroupPermission>(this.attach_AlbumGroupPermissions), new Action<AlbumGroupPermission>(this.detach_AlbumGroupPermissions));
			this._AlbumImages = new EntitySet<AlbumImage>(new Action<AlbumImage>(this.attach_AlbumImages), new Action<AlbumImage>(this.detach_AlbumImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Album_ID
		{
			get
			{
				return this._Album_ID;
			}
			set
			{
				if ((this._Album_ID != value))
				{
					this.OnAlbum_IDChanging(value);
					this.SendPropertyChanging();
					this._Album_ID = value;
					this.SendPropertyChanged("Album_ID");
					this.OnAlbum_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Title", DbType="VarChar(100)")]
		public string Album_Title
		{
			get
			{
				return this._Album_Title;
			}
			set
			{
				if ((this._Album_Title != value))
				{
					this.OnAlbum_TitleChanging(value);
					this.SendPropertyChanging();
					this._Album_Title = value;
					this.SendPropertyChanged("Album_Title");
					this.OnAlbum_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album_Description", DbType="VarChar(MAX)")]
		public string Album_Description
		{
			get
			{
				return this._Album_Description;
			}
			set
			{
				if ((this._Album_Description != value))
				{
					this.OnAlbum_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Album_Description = value;
					this.SendPropertyChanged("Album_Description");
					this.OnAlbum_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cover_Image_Path", DbType="VarChar(200)")]
		public string Cover_Image_Path
		{
			get
			{
				return this._Cover_Image_Path;
			}
			set
			{
				if ((this._Cover_Image_Path != value))
				{
					this.OnCover_Image_PathChanging(value);
					this.SendPropertyChanging();
					this._Cover_Image_Path = value;
					this.SendPropertyChanged("Cover_Image_Path");
					this.OnCover_Image_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumMaster_AlbumGroupPermission", Storage="_AlbumGroupPermissions", ThisKey="Album_ID", OtherKey="Album_ID")]
		public EntitySet<AlbumGroupPermission> AlbumGroupPermissions
		{
			get
			{
				return this._AlbumGroupPermissions;
			}
			set
			{
				this._AlbumGroupPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumMaster_AlbumImage", Storage="_AlbumImages", ThisKey="Album_ID", OtherKey="Album_ID")]
		public EntitySet<AlbumImage> AlbumImages
		{
			get
			{
				return this._AlbumImages;
			}
			set
			{
				this._AlbumImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGroupPermissions(AlbumGroupPermission entity)
		{
			this.SendPropertyChanging();
			entity.AlbumMaster = this;
		}
		
		private void detach_AlbumGroupPermissions(AlbumGroupPermission entity)
		{
			this.SendPropertyChanging();
			entity.AlbumMaster = null;
		}
		
		private void attach_AlbumImages(AlbumImage entity)
		{
			this.SendPropertyChanging();
			entity.AlbumMaster = this;
		}
		
		private void detach_AlbumImages(AlbumImage entity)
		{
			this.SendPropertyChanging();
			entity.AlbumMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscussionMaster")]
	public partial class DiscussionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Discussion_ID;
		
		private string _Discussion_Topic;
		
		private string _Discussion_Description;
		
		private System.Nullable<int> _User_ID;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private EntitySet<DiscussionResponse> _DiscussionResponses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscussion_IDChanging(int value);
    partial void OnDiscussion_IDChanged();
    partial void OnDiscussion_TopicChanging(string value);
    partial void OnDiscussion_TopicChanged();
    partial void OnDiscussion_DescriptionChanging(string value);
    partial void OnDiscussion_DescriptionChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public DiscussionMaster()
		{
			this._DiscussionResponses = new EntitySet<DiscussionResponse>(new Action<DiscussionResponse>(this.attach_DiscussionResponses), new Action<DiscussionResponse>(this.detach_DiscussionResponses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discussion_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Discussion_ID
		{
			get
			{
				return this._Discussion_ID;
			}
			set
			{
				if ((this._Discussion_ID != value))
				{
					this.OnDiscussion_IDChanging(value);
					this.SendPropertyChanging();
					this._Discussion_ID = value;
					this.SendPropertyChanged("Discussion_ID");
					this.OnDiscussion_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discussion_Topic", DbType="VarChar(200)")]
		public string Discussion_Topic
		{
			get
			{
				return this._Discussion_Topic;
			}
			set
			{
				if ((this._Discussion_Topic != value))
				{
					this.OnDiscussion_TopicChanging(value);
					this.SendPropertyChanging();
					this._Discussion_Topic = value;
					this.SendPropertyChanged("Discussion_Topic");
					this.OnDiscussion_TopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discussion_Description", DbType="VarChar(MAX)")]
		public string Discussion_Description
		{
			get
			{
				return this._Discussion_Description;
			}
			set
			{
				if ((this._Discussion_Description != value))
				{
					this.OnDiscussion_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Discussion_Description = value;
					this.SendPropertyChanged("Discussion_Description");
					this.OnDiscussion_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiscussionMaster_DiscussionResponse", Storage="_DiscussionResponses", ThisKey="Discussion_ID", OtherKey="Discussion_ID")]
		public EntitySet<DiscussionResponse> DiscussionResponses
		{
			get
			{
				return this._DiscussionResponses;
			}
			set
			{
				this._DiscussionResponses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiscussionResponses(DiscussionResponse entity)
		{
			this.SendPropertyChanging();
			entity.DiscussionMaster = this;
		}
		
		private void detach_DiscussionResponses(DiscussionResponse entity)
		{
			this.SendPropertyChanging();
			entity.DiscussionMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscussionResponse")]
	public partial class DiscussionResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Rsponse_ID;
		
		private System.Nullable<int> _Discussion_ID;
		
		private string _Response;
		
		private System.Nullable<int> _User_ID;
		
		private System.Nullable<System.DateTime> _Response_Date;
		
		private EntityRef<DiscussionMaster> _DiscussionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRsponse_IDChanging(int value);
    partial void OnRsponse_IDChanged();
    partial void OnDiscussion_IDChanging(System.Nullable<int> value);
    partial void OnDiscussion_IDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnResponse_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnResponse_DateChanged();
    #endregion
		
		public DiscussionResponse()
		{
			this._DiscussionMaster = default(EntityRef<DiscussionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rsponse_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Rsponse_ID
		{
			get
			{
				return this._Rsponse_ID;
			}
			set
			{
				if ((this._Rsponse_ID != value))
				{
					this.OnRsponse_IDChanging(value);
					this.SendPropertyChanging();
					this._Rsponse_ID = value;
					this.SendPropertyChanged("Rsponse_ID");
					this.OnRsponse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discussion_ID", DbType="Int")]
		public System.Nullable<int> Discussion_ID
		{
			get
			{
				return this._Discussion_ID;
			}
			set
			{
				if ((this._Discussion_ID != value))
				{
					if (this._DiscussionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiscussion_IDChanging(value);
					this.SendPropertyChanging();
					this._Discussion_ID = value;
					this.SendPropertyChanged("Discussion_ID");
					this.OnDiscussion_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="VarChar(MAX)")]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Response_Date
		{
			get
			{
				return this._Response_Date;
			}
			set
			{
				if ((this._Response_Date != value))
				{
					this.OnResponse_DateChanging(value);
					this.SendPropertyChanging();
					this._Response_Date = value;
					this.SendPropertyChanged("Response_Date");
					this.OnResponse_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiscussionMaster_DiscussionResponse", Storage="_DiscussionMaster", ThisKey="Discussion_ID", OtherKey="Discussion_ID", IsForeignKey=true)]
		public DiscussionMaster DiscussionMaster
		{
			get
			{
				return this._DiscussionMaster.Entity;
			}
			set
			{
				DiscussionMaster previousValue = this._DiscussionMaster.Entity;
				if (((previousValue != value) 
							|| (this._DiscussionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DiscussionMaster.Entity = null;
						previousValue.DiscussionResponses.Remove(this);
					}
					this._DiscussionMaster.Entity = value;
					if ((value != null))
					{
						value.DiscussionResponses.Add(this);
						this._Discussion_ID = value.Discussion_ID;
					}
					else
					{
						this._Discussion_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DiscussionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FAQMaster")]
	public partial class FAQMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FAQ_ID;
		
		private string _FAQ;
		
		private string _Answer;
		
		private System.Nullable<System.DateTime> _Post_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFAQ_IDChanging(int value);
    partial void OnFAQ_IDChanged();
    partial void OnFAQChanging(string value);
    partial void OnFAQChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnPost_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPost_DateChanged();
    #endregion
		
		public FAQMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAQ_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FAQ_ID
		{
			get
			{
				return this._FAQ_ID;
			}
			set
			{
				if ((this._FAQ_ID != value))
				{
					this.OnFAQ_IDChanging(value);
					this.SendPropertyChanging();
					this._FAQ_ID = value;
					this.SendPropertyChanged("FAQ_ID");
					this.OnFAQ_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAQ", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string FAQ
		{
			get
			{
				return this._FAQ;
			}
			set
			{
				if ((this._FAQ != value))
				{
					this.OnFAQChanging(value);
					this.SendPropertyChanging();
					this._FAQ = value;
					this.SendPropertyChanged("FAQ");
					this.OnFAQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(MAX)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Post_Date
		{
			get
			{
				return this._Post_Date;
			}
			set
			{
				if ((this._Post_Date != value))
				{
					this.OnPost_DateChanging(value);
					this.SendPropertyChanging();
					this._Post_Date = value;
					this.SendPropertyChanged("Post_Date");
					this.OnPost_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendMaster")]
	public partial class FriendMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private int _Friend_ID;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnFriend_IDChanging(int value);
    partial void OnFriend_IDChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public FriendMaster()
		{
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Friend_ID
		{
			get
			{
				return this._Friend_ID;
			}
			set
			{
				if ((this._Friend_ID != value))
				{
					this.OnFriend_IDChanging(value);
					this.SendPropertyChanging();
					this._Friend_ID = value;
					this.SendPropertyChanged("Friend_ID");
					this.OnFriend_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_FriendMaster", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.FriendMasters.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.FriendMasters.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendRequest")]
	public partial class FriendRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Friend_Request_ID;
		
		private int _User_ID;
		
		private int _Friend_ID;
		
		private System.Nullable<System.DateTime> _Request_Date;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriend_Request_IDChanging(int value);
    partial void OnFriend_Request_IDChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnFriend_IDChanging(int value);
    partial void OnFriend_IDChanged();
    partial void OnRequest_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequest_DateChanged();
    #endregion
		
		public FriendRequest()
		{
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_Request_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Friend_Request_ID
		{
			get
			{
				return this._Friend_Request_ID;
			}
			set
			{
				if ((this._Friend_Request_ID != value))
				{
					this.OnFriend_Request_IDChanging(value);
					this.SendPropertyChanging();
					this._Friend_Request_ID = value;
					this.SendPropertyChanged("Friend_Request_ID");
					this.OnFriend_Request_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_ID", DbType="Int NOT NULL")]
		public int Friend_ID
		{
			get
			{
				return this._Friend_ID;
			}
			set
			{
				if ((this._Friend_ID != value))
				{
					this.OnFriend_IDChanging(value);
					this.SendPropertyChanging();
					this._Friend_ID = value;
					this.SendPropertyChanged("Friend_ID");
					this.OnFriend_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Request_Date
		{
			get
			{
				return this._Request_Date;
			}
			set
			{
				if ((this._Request_Date != value))
				{
					this.OnRequest_DateChanging(value);
					this.SendPropertyChanging();
					this._Request_Date = value;
					this.SendPropertyChanged("Request_Date");
					this.OnRequest_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_FriendRequest", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.FriendRequests.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.FriendRequests.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupMaster")]
	public partial class GroupMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Group_ID;
		
		private System.Nullable<int> _User_ID;
		
		private string _Group_Name;
		
		private string _Group_Description;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntitySet<AlbumGroupPermission> _AlbumGroupPermissions;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroup_IDChanging(int value);
    partial void OnGroup_IDChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnGroup_NameChanging(string value);
    partial void OnGroup_NameChanged();
    partial void OnGroup_DescriptionChanging(string value);
    partial void OnGroup_DescriptionChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public GroupMaster()
		{
			this._AlbumGroupPermissions = new EntitySet<AlbumGroupPermission>(new Action<AlbumGroupPermission>(this.attach_AlbumGroupPermissions), new Action<AlbumGroupPermission>(this.detach_AlbumGroupPermissions));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_Name", DbType="VarChar(100)")]
		public string Group_Name
		{
			get
			{
				return this._Group_Name;
			}
			set
			{
				if ((this._Group_Name != value))
				{
					this.OnGroup_NameChanging(value);
					this.SendPropertyChanging();
					this._Group_Name = value;
					this.SendPropertyChanged("Group_Name");
					this.OnGroup_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_Description", DbType="VarChar(500)")]
		public string Group_Description
		{
			get
			{
				return this._Group_Description;
			}
			set
			{
				if ((this._Group_Description != value))
				{
					this.OnGroup_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Group_Description = value;
					this.SendPropertyChanged("Group_Description");
					this.OnGroup_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupMaster_AlbumGroupPermission", Storage="_AlbumGroupPermissions", ThisKey="Group_ID", OtherKey="Group_ID")]
		public EntitySet<AlbumGroupPermission> AlbumGroupPermissions
		{
			get
			{
				return this._AlbumGroupPermissions;
			}
			set
			{
				this._AlbumGroupPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupMaster_GroupMember", Storage="_GroupMembers", ThisKey="Group_ID", OtherKey="Group_ID")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_GroupMaster", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.GroupMasters.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.GroupMasters.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlbumGroupPermissions(AlbumGroupPermission entity)
		{
			this.SendPropertyChanging();
			entity.GroupMaster = this;
		}
		
		private void detach_AlbumGroupPermissions(AlbumGroupPermission entity)
		{
			this.SendPropertyChanging();
			entity.GroupMaster = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.GroupMaster = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.GroupMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupMembers")]
	public partial class GroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Group_ID;
		
		private int _Friend_ID;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntityRef<GroupMaster> _GroupMaster;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroup_IDChanging(int value);
    partial void OnGroup_IDChanged();
    partial void OnFriend_IDChanging(int value);
    partial void OnFriend_IDChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public GroupMember()
		{
			this._GroupMaster = default(EntityRef<GroupMaster>);
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					if (this._GroupMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Friend_ID
		{
			get
			{
				return this._Friend_ID;
			}
			set
			{
				if ((this._Friend_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriend_IDChanging(value);
					this.SendPropertyChanging();
					this._Friend_ID = value;
					this.SendPropertyChanged("Friend_ID");
					this.OnFriend_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupMaster_GroupMember", Storage="_GroupMaster", ThisKey="Group_ID", OtherKey="Group_ID", IsForeignKey=true)]
		public GroupMaster GroupMaster
		{
			get
			{
				return this._GroupMaster.Entity;
			}
			set
			{
				GroupMaster previousValue = this._GroupMaster.Entity;
				if (((previousValue != value) 
							|| (this._GroupMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupMaster.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._GroupMaster.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._Group_ID = value.Group_ID;
					}
					else
					{
						this._Group_ID = default(int);
					}
					this.SendPropertyChanged("GroupMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_GroupMember", Storage="_UserMaster", ThisKey="Friend_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._Friend_ID = value.User_ID;
					}
					else
					{
						this._Friend_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageComments")]
	public partial class ImageComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Comment_ID;
		
		private decimal _Image_ID;
		
		private System.Nullable<int> _Friend_ID;
		
		private string _Image_Comment;
		
		private System.Nullable<System.DateTime> _Comment_Date;
		
		private EntityRef<AlbumImage> _AlbumImage;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComment_IDChanging(decimal value);
    partial void OnComment_IDChanged();
    partial void OnImage_IDChanging(decimal value);
    partial void OnImage_IDChanged();
    partial void OnFriend_IDChanging(System.Nullable<int> value);
    partial void OnFriend_IDChanged();
    partial void OnImage_CommentChanging(string value);
    partial void OnImage_CommentChanged();
    partial void OnComment_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnComment_DateChanged();
    #endregion
		
		public ImageComment()
		{
			this._AlbumImage = default(EntityRef<AlbumImage>);
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment_ID", AutoSync=AutoSync.OnInsert, DbType="Decimal(20,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public decimal Comment_ID
		{
			get
			{
				return this._Comment_ID;
			}
			set
			{
				if ((this._Comment_ID != value))
				{
					this.OnComment_IDChanging(value);
					this.SendPropertyChanging();
					this._Comment_ID = value;
					this.SendPropertyChanged("Comment_ID");
					this.OnComment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_ID", DbType="Decimal(20,0) NOT NULL")]
		public decimal Image_ID
		{
			get
			{
				return this._Image_ID;
			}
			set
			{
				if ((this._Image_ID != value))
				{
					if (this._AlbumImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImage_IDChanging(value);
					this.SendPropertyChanging();
					this._Image_ID = value;
					this.SendPropertyChanged("Image_ID");
					this.OnImage_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_ID", DbType="Int")]
		public System.Nullable<int> Friend_ID
		{
			get
			{
				return this._Friend_ID;
			}
			set
			{
				if ((this._Friend_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriend_IDChanging(value);
					this.SendPropertyChanging();
					this._Friend_ID = value;
					this.SendPropertyChanged("Friend_ID");
					this.OnFriend_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Comment", DbType="VarChar(500)")]
		public string Image_Comment
		{
			get
			{
				return this._Image_Comment;
			}
			set
			{
				if ((this._Image_Comment != value))
				{
					this.OnImage_CommentChanging(value);
					this.SendPropertyChanging();
					this._Image_Comment = value;
					this.SendPropertyChanged("Image_Comment");
					this.OnImage_CommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Comment_Date
		{
			get
			{
				return this._Comment_Date;
			}
			set
			{
				if ((this._Comment_Date != value))
				{
					this.OnComment_DateChanging(value);
					this.SendPropertyChanging();
					this._Comment_Date = value;
					this.SendPropertyChanged("Comment_Date");
					this.OnComment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlbumImage_ImageComment", Storage="_AlbumImage", ThisKey="Image_ID", OtherKey="Image_ID", IsForeignKey=true)]
		public AlbumImage AlbumImage
		{
			get
			{
				return this._AlbumImage.Entity;
			}
			set
			{
				AlbumImage previousValue = this._AlbumImage.Entity;
				if (((previousValue != value) 
							|| (this._AlbumImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlbumImage.Entity = null;
						previousValue.ImageComments.Remove(this);
					}
					this._AlbumImage.Entity = value;
					if ((value != null))
					{
						value.ImageComments.Add(this);
						this._Image_ID = value.Image_ID;
					}
					else
					{
						this._Image_ID = default(decimal);
					}
					this.SendPropertyChanged("AlbumImage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_ImageComment", Storage="_UserMaster", ThisKey="Friend_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.ImageComments.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.ImageComments.Add(this);
						this._Friend_ID = value.User_ID;
					}
					else
					{
						this._Friend_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsletterMaster")]
	public partial class NewsletterMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Newsletter_ID;
		
		private string _Newsletter_Title;
		
		private string _Newsletter_Path;
		
		private System.Nullable<System.DateTime> _Sent_Date;
		
		private string _Newsletter_Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletter_IDChanging(int value);
    partial void OnNewsletter_IDChanged();
    partial void OnNewsletter_TitleChanging(string value);
    partial void OnNewsletter_TitleChanged();
    partial void OnNewsletter_PathChanging(string value);
    partial void OnNewsletter_PathChanged();
    partial void OnSent_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnSent_DateChanged();
    partial void OnNewsletter_StatusChanging(string value);
    partial void OnNewsletter_StatusChanged();
    #endregion
		
		public NewsletterMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newsletter_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Newsletter_ID
		{
			get
			{
				return this._Newsletter_ID;
			}
			set
			{
				if ((this._Newsletter_ID != value))
				{
					this.OnNewsletter_IDChanging(value);
					this.SendPropertyChanging();
					this._Newsletter_ID = value;
					this.SendPropertyChanged("Newsletter_ID");
					this.OnNewsletter_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newsletter_Title", DbType="VarChar(200)")]
		public string Newsletter_Title
		{
			get
			{
				return this._Newsletter_Title;
			}
			set
			{
				if ((this._Newsletter_Title != value))
				{
					this.OnNewsletter_TitleChanging(value);
					this.SendPropertyChanging();
					this._Newsletter_Title = value;
					this.SendPropertyChanged("Newsletter_Title");
					this.OnNewsletter_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newsletter_Path", DbType="VarChar(200)")]
		public string Newsletter_Path
		{
			get
			{
				return this._Newsletter_Path;
			}
			set
			{
				if ((this._Newsletter_Path != value))
				{
					this.OnNewsletter_PathChanging(value);
					this.SendPropertyChanging();
					this._Newsletter_Path = value;
					this.SendPropertyChanged("Newsletter_Path");
					this.OnNewsletter_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Sent_Date
		{
			get
			{
				return this._Sent_Date;
			}
			set
			{
				if ((this._Sent_Date != value))
				{
					this.OnSent_DateChanging(value);
					this.SendPropertyChanging();
					this._Sent_Date = value;
					this.SendPropertyChanged("Sent_Date");
					this.OnSent_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Newsletter_Status", DbType="VarChar(10)")]
		public string Newsletter_Status
		{
			get
			{
				return this._Newsletter_Status;
			}
			set
			{
				if ((this._Newsletter_Status != value))
				{
					this.OnNewsletter_StatusChanging(value);
					this.SendPropertyChanging();
					this._Newsletter_Status = value;
					this.SendPropertyChanged("Newsletter_Status");
					this.OnNewsletter_StatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatorAddress")]
	public partial class OperatorAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Operator_ID;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Pin_Code;
		
		private EntityRef<OperatorMaster> _OperatorMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperator_IDChanging(int value);
    partial void OnOperator_IDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPin_CodeChanging(string value);
    partial void OnPin_CodeChanged();
    #endregion
		
		public OperatorAddress()
		{
			this._OperatorMaster = default(EntityRef<OperatorMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Operator_ID
		{
			get
			{
				return this._Operator_ID;
			}
			set
			{
				if ((this._Operator_ID != value))
				{
					if (this._OperatorMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperator_IDChanging(value);
					this.SendPropertyChanging();
					this._Operator_ID = value;
					this.SendPropertyChanged("Operator_ID");
					this.OnOperator_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(100)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin_Code", DbType="VarChar(10)")]
		public string Pin_Code
		{
			get
			{
				return this._Pin_Code;
			}
			set
			{
				if ((this._Pin_Code != value))
				{
					this.OnPin_CodeChanging(value);
					this.SendPropertyChanging();
					this._Pin_Code = value;
					this.SendPropertyChanged("Pin_Code");
					this.OnPin_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatorMaster_OperatorAddress", Storage="_OperatorMaster", ThisKey="Operator_ID", OtherKey="Operator_ID", IsForeignKey=true)]
		public OperatorMaster OperatorMaster
		{
			get
			{
				return this._OperatorMaster.Entity;
			}
			set
			{
				OperatorMaster previousValue = this._OperatorMaster.Entity;
				if (((previousValue != value) 
							|| (this._OperatorMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatorMaster.Entity = null;
						previousValue.OperatorAddress = null;
					}
					this._OperatorMaster.Entity = value;
					if ((value != null))
					{
						value.OperatorAddress = this;
						this._Operator_ID = value.Operator_ID;
					}
					else
					{
						this._Operator_ID = default(int);
					}
					this.SendPropertyChanged("OperatorMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestMaster")]
	public partial class RequestMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Request_ID;
		
		private string _Request_Title;
		
		private string _Request_Description;
		
		private System.Nullable<int> _User_ID;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Request_Date;
		
		private EntitySet<ResponseMaster> _ResponseMasters;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequest_IDChanging(int value);
    partial void OnRequest_IDChanged();
    partial void OnRequest_TitleChanging(string value);
    partial void OnRequest_TitleChanged();
    partial void OnRequest_DescriptionChanging(string value);
    partial void OnRequest_DescriptionChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnRequest_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequest_DateChanged();
    #endregion
		
		public RequestMaster()
		{
			this._ResponseMasters = new EntitySet<ResponseMaster>(new Action<ResponseMaster>(this.attach_ResponseMasters), new Action<ResponseMaster>(this.detach_ResponseMasters));
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Request_ID
		{
			get
			{
				return this._Request_ID;
			}
			set
			{
				if ((this._Request_ID != value))
				{
					this.OnRequest_IDChanging(value);
					this.SendPropertyChanging();
					this._Request_ID = value;
					this.SendPropertyChanged("Request_ID");
					this.OnRequest_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_Title", DbType="VarChar(200)")]
		public string Request_Title
		{
			get
			{
				return this._Request_Title;
			}
			set
			{
				if ((this._Request_Title != value))
				{
					this.OnRequest_TitleChanging(value);
					this.SendPropertyChanging();
					this._Request_Title = value;
					this.SendPropertyChanged("Request_Title");
					this.OnRequest_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_Description", DbType="VarChar(MAX)")]
		public string Request_Description
		{
			get
			{
				return this._Request_Description;
			}
			set
			{
				if ((this._Request_Description != value))
				{
					this.OnRequest_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Request_Description = value;
					this.SendPropertyChanged("Request_Description");
					this.OnRequest_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Request_Date
		{
			get
			{
				return this._Request_Date;
			}
			set
			{
				if ((this._Request_Date != value))
				{
					this.OnRequest_DateChanging(value);
					this.SendPropertyChanging();
					this._Request_Date = value;
					this.SendPropertyChanged("Request_Date");
					this.OnRequest_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestMaster_ResponseMaster", Storage="_ResponseMasters", ThisKey="Request_ID", OtherKey="Request_ID")]
		public EntitySet<ResponseMaster> ResponseMasters
		{
			get
			{
				return this._ResponseMasters;
			}
			set
			{
				this._ResponseMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_RequestMaster", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.RequestMasters.Remove(this);
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.RequestMasters.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResponseMasters(ResponseMaster entity)
		{
			this.SendPropertyChanging();
			entity.RequestMaster = this;
		}
		
		private void detach_ResponseMasters(ResponseMaster entity)
		{
			this.SendPropertyChanging();
			entity.RequestMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResponseMaster")]
	public partial class ResponseMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Response_ID;
		
		private System.Nullable<int> _Request_ID;
		
		private string _Response;
		
		private System.Nullable<System.DateTime> _Response_Date;
		
		private EntityRef<RequestMaster> _RequestMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponse_IDChanging(int value);
    partial void OnResponse_IDChanged();
    partial void OnRequest_IDChanging(System.Nullable<int> value);
    partial void OnRequest_IDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnResponse_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnResponse_DateChanged();
    #endregion
		
		public ResponseMaster()
		{
			this._RequestMaster = default(EntityRef<RequestMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Response_ID
		{
			get
			{
				return this._Response_ID;
			}
			set
			{
				if ((this._Response_ID != value))
				{
					this.OnResponse_IDChanging(value);
					this.SendPropertyChanging();
					this._Response_ID = value;
					this.SendPropertyChanged("Response_ID");
					this.OnResponse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request_ID", DbType="Int")]
		public System.Nullable<int> Request_ID
		{
			get
			{
				return this._Request_ID;
			}
			set
			{
				if ((this._Request_ID != value))
				{
					if (this._RequestMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequest_IDChanging(value);
					this.SendPropertyChanging();
					this._Request_ID = value;
					this.SendPropertyChanged("Request_ID");
					this.OnRequest_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="VarChar(MAX)")]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Response_Date
		{
			get
			{
				return this._Response_Date;
			}
			set
			{
				if ((this._Response_Date != value))
				{
					this.OnResponse_DateChanging(value);
					this.SendPropertyChanging();
					this._Response_Date = value;
					this.SendPropertyChanged("Response_Date");
					this.OnResponse_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestMaster_ResponseMaster", Storage="_RequestMaster", ThisKey="Request_ID", OtherKey="Request_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public RequestMaster RequestMaster
		{
			get
			{
				return this._RequestMaster.Entity;
			}
			set
			{
				RequestMaster previousValue = this._RequestMaster.Entity;
				if (((previousValue != value) 
							|| (this._RequestMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestMaster.Entity = null;
						previousValue.ResponseMasters.Remove(this);
					}
					this._RequestMaster.Entity = value;
					if ((value != null))
					{
						value.ResponseMasters.Add(this);
						this._Request_ID = value.Request_ID;
					}
					else
					{
						this._Request_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupportResponse")]
	public partial class SupportResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Response_ID;
		
		private System.Nullable<int> _Support_ID;
		
		private string _Response;
		
		private System.Nullable<System.DateTime> _Response_Date;
		
		private EntityRef<SupportMaster> _SupportMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResponse_IDChanging(int value);
    partial void OnResponse_IDChanged();
    partial void OnSupport_IDChanging(System.Nullable<int> value);
    partial void OnSupport_IDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnResponse_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnResponse_DateChanged();
    #endregion
		
		public SupportResponse()
		{
			this._SupportMaster = default(EntityRef<SupportMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Response_ID
		{
			get
			{
				return this._Response_ID;
			}
			set
			{
				if ((this._Response_ID != value))
				{
					this.OnResponse_IDChanging(value);
					this.SendPropertyChanging();
					this._Response_ID = value;
					this.SendPropertyChanged("Response_ID");
					this.OnResponse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_ID", DbType="Int")]
		public System.Nullable<int> Support_ID
		{
			get
			{
				return this._Support_ID;
			}
			set
			{
				if ((this._Support_ID != value))
				{
					if (this._SupportMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupport_IDChanging(value);
					this.SendPropertyChanging();
					this._Support_ID = value;
					this.SendPropertyChanged("Support_ID");
					this.OnSupport_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="VarChar(MAX)")]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Response_Date
		{
			get
			{
				return this._Response_Date;
			}
			set
			{
				if ((this._Response_Date != value))
				{
					this.OnResponse_DateChanging(value);
					this.SendPropertyChanging();
					this._Response_Date = value;
					this.SendPropertyChanged("Response_Date");
					this.OnResponse_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupportMaster_SupportResponse", Storage="_SupportMaster", ThisKey="Support_ID", OtherKey="Support_ID", IsForeignKey=true)]
		public SupportMaster SupportMaster
		{
			get
			{
				return this._SupportMaster.Entity;
			}
			set
			{
				SupportMaster previousValue = this._SupportMaster.Entity;
				if (((previousValue != value) 
							|| (this._SupportMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupportMaster.Entity = null;
						previousValue.SupportResponses.Remove(this);
					}
					this._SupportMaster.Entity = value;
					if ((value != null))
					{
						value.SupportResponses.Add(this);
						this._Support_ID = value.Support_ID;
					}
					else
					{
						this._Support_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SupportMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupportTypeMaster")]
	public partial class SupportTypeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Support_Type_ID;
		
		private string _Support_Type;
		
		private string _Support_Description;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<SupportMaster> _SupportMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupport_Type_IDChanging(int value);
    partial void OnSupport_Type_IDChanged();
    partial void OnSupport_TypeChanging(string value);
    partial void OnSupport_TypeChanged();
    partial void OnSupport_DescriptionChanging(string value);
    partial void OnSupport_DescriptionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public SupportTypeMaster()
		{
			this._SupportMasters = new EntitySet<SupportMaster>(new Action<SupportMaster>(this.attach_SupportMasters), new Action<SupportMaster>(this.detach_SupportMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Support_Type_ID
		{
			get
			{
				return this._Support_Type_ID;
			}
			set
			{
				if ((this._Support_Type_ID != value))
				{
					this.OnSupport_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Support_Type_ID = value;
					this.SendPropertyChanged("Support_Type_ID");
					this.OnSupport_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_Type", DbType="VarChar(200)")]
		public string Support_Type
		{
			get
			{
				return this._Support_Type;
			}
			set
			{
				if ((this._Support_Type != value))
				{
					this.OnSupport_TypeChanging(value);
					this.SendPropertyChanging();
					this._Support_Type = value;
					this.SendPropertyChanged("Support_Type");
					this.OnSupport_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Support_Description", DbType="VarChar(500)")]
		public string Support_Description
		{
			get
			{
				return this._Support_Description;
			}
			set
			{
				if ((this._Support_Description != value))
				{
					this.OnSupport_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Support_Description = value;
					this.SendPropertyChanged("Support_Description");
					this.OnSupport_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupportTypeMaster_SupportMaster", Storage="_SupportMasters", ThisKey="Support_Type_ID", OtherKey="Support_Type_ID")]
		public EntitySet<SupportMaster> SupportMasters
		{
			get
			{
				return this._SupportMasters;
			}
			set
			{
				this._SupportMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupportMasters(SupportMaster entity)
		{
			this.SendPropertyChanging();
			entity.SupportTypeMaster = this;
		}
		
		private void detach_SupportMasters(SupportMaster entity)
		{
			this.SendPropertyChanging();
			entity.SupportTypeMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThemeMaster")]
	public partial class ThemeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Theme_ID;
		
		private string _Theme_Title;
		
		private string _Theme_Image_Path;
		
		private string _Theme_Description;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private EntitySet<UserTheme> _UserThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTheme_IDChanging(int value);
    partial void OnTheme_IDChanged();
    partial void OnTheme_TitleChanging(string value);
    partial void OnTheme_TitleChanged();
    partial void OnTheme_Image_PathChanging(string value);
    partial void OnTheme_Image_PathChanged();
    partial void OnTheme_DescriptionChanging(string value);
    partial void OnTheme_DescriptionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public ThemeMaster()
		{
			this._UserThemes = new EntitySet<UserTheme>(new Action<UserTheme>(this.attach_UserThemes), new Action<UserTheme>(this.detach_UserThemes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Theme_ID
		{
			get
			{
				return this._Theme_ID;
			}
			set
			{
				if ((this._Theme_ID != value))
				{
					this.OnTheme_IDChanging(value);
					this.SendPropertyChanging();
					this._Theme_ID = value;
					this.SendPropertyChanged("Theme_ID");
					this.OnTheme_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme_Title", DbType="VarChar(100)")]
		public string Theme_Title
		{
			get
			{
				return this._Theme_Title;
			}
			set
			{
				if ((this._Theme_Title != value))
				{
					this.OnTheme_TitleChanging(value);
					this.SendPropertyChanging();
					this._Theme_Title = value;
					this.SendPropertyChanged("Theme_Title");
					this.OnTheme_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme_Image_Path", DbType="VarChar(200)")]
		public string Theme_Image_Path
		{
			get
			{
				return this._Theme_Image_Path;
			}
			set
			{
				if ((this._Theme_Image_Path != value))
				{
					this.OnTheme_Image_PathChanging(value);
					this.SendPropertyChanging();
					this._Theme_Image_Path = value;
					this.SendPropertyChanged("Theme_Image_Path");
					this.OnTheme_Image_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme_Description", DbType="VarChar(MAX)")]
		public string Theme_Description
		{
			get
			{
				return this._Theme_Description;
			}
			set
			{
				if ((this._Theme_Description != value))
				{
					this.OnTheme_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Theme_Description = value;
					this.SendPropertyChanged("Theme_Description");
					this.OnTheme_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemeMaster_UserTheme", Storage="_UserThemes", ThisKey="Theme_ID", OtherKey="Theme_ID")]
		public EntitySet<UserTheme> UserThemes
		{
			get
			{
				return this._UserThemes;
			}
			set
			{
				this._UserThemes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserThemes(UserTheme entity)
		{
			this.SendPropertyChanging();
			entity.ThemeMaster = this;
		}
		
		private void detach_UserThemes(UserTheme entity)
		{
			this.SendPropertyChanging();
			entity.ThemeMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAddress")]
	public partial class UserAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Pin_Code;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnPin_CodeChanging(string value);
    partial void OnPin_CodeChanged();
    #endregion
		
		public UserAddress()
		{
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(100)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin_Code", DbType="VarChar(10)")]
		public string Pin_Code
		{
			get
			{
				return this._Pin_Code;
			}
			set
			{
				if ((this._Pin_Code != value))
				{
					this.OnPin_CodeChanging(value);
					this.SendPropertyChanging();
					this._Pin_Code = value;
					this.SendPropertyChanged("Pin_Code");
					this.OnPin_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserAddress", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.UserAddress = null;
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.UserAddress = this;
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDetails")]
	public partial class UserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Initial;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Gender;
		
		private string _Phone;
		
		private string _Mobile;
		
		private string _Email_Id;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnInitialChanging(string value);
    partial void OnInitialChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnEmail_IdChanging(string value);
    partial void OnEmail_IdChanged();
    #endregion
		
		public UserDetail()
		{
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial", DbType="VarChar(5)")]
		public string Initial
		{
			get
			{
				return this._Initial;
			}
			set
			{
				if ((this._Initial != value))
				{
					this.OnInitialChanging(value);
					this.SendPropertyChanging();
					this._Initial = value;
					this.SendPropertyChanged("Initial");
					this.OnInitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_Id", DbType="VarChar(100)")]
		public string Email_Id
		{
			get
			{
				return this._Email_Id;
			}
			set
			{
				if ((this._Email_Id != value))
				{
					this.OnEmail_IdChanging(value);
					this.SendPropertyChanging();
					this._Email_Id = value;
					this.SendPropertyChanged("Email_Id");
					this.OnEmail_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserDetail", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.UserDetail = null;
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.UserDetail = this;
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFeedbackDetail")]
	public partial class UserFeedbackDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Feedback_ID;
		
		private int _Feedback_Question_ID;
		
		private System.Nullable<int> _Feedback_Answer_ID;
		
		private EntityRef<FeedbackAnswerMaster> _FeedbackAnswerMaster;
		
		private EntityRef<FeedbackQuestionMaster> _FeedbackQuestionMaster;
		
		private EntityRef<UserFeedbackMaster> _UserFeedbackMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_Feedback_IDChanging(int value);
    partial void OnUser_Feedback_IDChanged();
    partial void OnFeedback_Question_IDChanging(int value);
    partial void OnFeedback_Question_IDChanged();
    partial void OnFeedback_Answer_IDChanging(System.Nullable<int> value);
    partial void OnFeedback_Answer_IDChanged();
    #endregion
		
		public UserFeedbackDetail()
		{
			this._FeedbackAnswerMaster = default(EntityRef<FeedbackAnswerMaster>);
			this._FeedbackQuestionMaster = default(EntityRef<FeedbackQuestionMaster>);
			this._UserFeedbackMaster = default(EntityRef<UserFeedbackMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Feedback_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_Feedback_ID
		{
			get
			{
				return this._User_Feedback_ID;
			}
			set
			{
				if ((this._User_Feedback_ID != value))
				{
					if (this._UserFeedbackMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_Feedback_IDChanging(value);
					this.SendPropertyChanging();
					this._User_Feedback_ID = value;
					this.SendPropertyChanged("User_Feedback_ID");
					this.OnUser_Feedback_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Question_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Feedback_Question_ID
		{
			get
			{
				return this._Feedback_Question_ID;
			}
			set
			{
				if ((this._Feedback_Question_ID != value))
				{
					if (this._FeedbackQuestionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedback_Question_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Question_ID = value;
					this.SendPropertyChanged("Feedback_Question_ID");
					this.OnFeedback_Question_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Answer_ID", DbType="Int")]
		public System.Nullable<int> Feedback_Answer_ID
		{
			get
			{
				return this._Feedback_Answer_ID;
			}
			set
			{
				if ((this._Feedback_Answer_ID != value))
				{
					if (this._FeedbackAnswerMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedback_Answer_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Answer_ID = value;
					this.SendPropertyChanged("Feedback_Answer_ID");
					this.OnFeedback_Answer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackAnswerMaster_UserFeedbackDetail", Storage="_FeedbackAnswerMaster", ThisKey="Feedback_Answer_ID", OtherKey="Feedback_Answer_ID", IsForeignKey=true)]
		public FeedbackAnswerMaster FeedbackAnswerMaster
		{
			get
			{
				return this._FeedbackAnswerMaster.Entity;
			}
			set
			{
				FeedbackAnswerMaster previousValue = this._FeedbackAnswerMaster.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackAnswerMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackAnswerMaster.Entity = null;
						previousValue.UserFeedbackDetails.Remove(this);
					}
					this._FeedbackAnswerMaster.Entity = value;
					if ((value != null))
					{
						value.UserFeedbackDetails.Add(this);
						this._Feedback_Answer_ID = value.Feedback_Answer_ID;
					}
					else
					{
						this._Feedback_Answer_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FeedbackAnswerMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackQuestionMaster_UserFeedbackDetail", Storage="_FeedbackQuestionMaster", ThisKey="Feedback_Question_ID", OtherKey="Feedback_Question_ID", IsForeignKey=true)]
		public FeedbackQuestionMaster FeedbackQuestionMaster
		{
			get
			{
				return this._FeedbackQuestionMaster.Entity;
			}
			set
			{
				FeedbackQuestionMaster previousValue = this._FeedbackQuestionMaster.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackQuestionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackQuestionMaster.Entity = null;
						previousValue.UserFeedbackDetails.Remove(this);
					}
					this._FeedbackQuestionMaster.Entity = value;
					if ((value != null))
					{
						value.UserFeedbackDetails.Add(this);
						this._Feedback_Question_ID = value.Feedback_Question_ID;
					}
					else
					{
						this._Feedback_Question_ID = default(int);
					}
					this.SendPropertyChanged("FeedbackQuestionMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserFeedbackMaster_UserFeedbackDetail", Storage="_UserFeedbackMaster", ThisKey="User_Feedback_ID", OtherKey="User_Feedback_ID", IsForeignKey=true)]
		public UserFeedbackMaster UserFeedbackMaster
		{
			get
			{
				return this._UserFeedbackMaster.Entity;
			}
			set
			{
				UserFeedbackMaster previousValue = this._UserFeedbackMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserFeedbackMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserFeedbackMaster.Entity = null;
						previousValue.UserFeedbackDetails.Remove(this);
					}
					this._UserFeedbackMaster.Entity = value;
					if ((value != null))
					{
						value.UserFeedbackDetails.Add(this);
						this._User_Feedback_ID = value.User_Feedback_ID;
					}
					else
					{
						this._User_Feedback_ID = default(int);
					}
					this.SendPropertyChanged("UserFeedbackMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFeedbackMaster")]
	public partial class UserFeedbackMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Feedback_ID;
		
		private System.Nullable<int> _User_ID;
		
		private string _Additional_Feedback;
		
		private System.Nullable<System.DateTime> _Feedback_Date;
		
		private EntitySet<UserFeedbackDetail> _UserFeedbackDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_Feedback_IDChanging(int value);
    partial void OnUser_Feedback_IDChanged();
    partial void OnUser_IDChanging(System.Nullable<int> value);
    partial void OnUser_IDChanged();
    partial void OnAdditional_FeedbackChanging(string value);
    partial void OnAdditional_FeedbackChanged();
    partial void OnFeedback_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnFeedback_DateChanged();
    #endregion
		
		public UserFeedbackMaster()
		{
			this._UserFeedbackDetails = new EntitySet<UserFeedbackDetail>(new Action<UserFeedbackDetail>(this.attach_UserFeedbackDetails), new Action<UserFeedbackDetail>(this.detach_UserFeedbackDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Feedback_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Feedback_ID
		{
			get
			{
				return this._User_Feedback_ID;
			}
			set
			{
				if ((this._User_Feedback_ID != value))
				{
					this.OnUser_Feedback_IDChanging(value);
					this.SendPropertyChanging();
					this._User_Feedback_ID = value;
					this.SendPropertyChanged("User_Feedback_ID");
					this.OnUser_Feedback_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int")]
		public System.Nullable<int> User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Additional_Feedback", DbType="VarChar(MAX)")]
		public string Additional_Feedback
		{
			get
			{
				return this._Additional_Feedback;
			}
			set
			{
				if ((this._Additional_Feedback != value))
				{
					this.OnAdditional_FeedbackChanging(value);
					this.SendPropertyChanging();
					this._Additional_Feedback = value;
					this.SendPropertyChanged("Additional_Feedback");
					this.OnAdditional_FeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Feedback_Date
		{
			get
			{
				return this._Feedback_Date;
			}
			set
			{
				if ((this._Feedback_Date != value))
				{
					this.OnFeedback_DateChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Date = value;
					this.SendPropertyChanged("Feedback_Date");
					this.OnFeedback_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserFeedbackMaster_UserFeedbackDetail", Storage="_UserFeedbackDetails", ThisKey="User_Feedback_ID", OtherKey="User_Feedback_ID")]
		public EntitySet<UserFeedbackDetail> UserFeedbackDetails
		{
			get
			{
				return this._UserFeedbackDetails;
			}
			set
			{
				this._UserFeedbackDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserFeedbackMaster = this;
		}
		
		private void detach_UserFeedbackDetails(UserFeedbackDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserFeedbackMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserImage")]
	public partial class UserImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Image_Path;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnImage_PathChanging(string value);
    partial void OnImage_PathChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public UserImage()
		{
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Path", DbType="VarChar(200)")]
		public string Image_Path
		{
			get
			{
				return this._Image_Path;
			}
			set
			{
				if ((this._Image_Path != value))
				{
					this.OnImage_PathChanging(value);
					this.SendPropertyChanging();
					this._Image_Path = value;
					this.SendPropertyChanged("Image_Path");
					this.OnImage_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserImage", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.UserImage = null;
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.UserImage = this;
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMaster")]
	public partial class UserMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _User_Name;
		
		private string _User_Password;
		
		private string _User_Type;
		
		private System.Nullable<int> _Security_Question_ID;
		
		private string _Security_Answer;
		
		private System.Nullable<System.DateTime> _Last_Login;
		
		private string _User_Status;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntitySet<FriendMaster> _FriendMasters;
		
		private EntitySet<FriendRequest> _FriendRequests;
		
		private EntitySet<GroupMaster> _GroupMasters;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntitySet<ImageComment> _ImageComments;
		
		private EntitySet<RequestMaster> _RequestMasters;
		
		private EntityRef<UserAddress> _UserAddress;
		
		private EntityRef<UserDetail> _UserDetail;
		
		private EntityRef<UserImage> _UserImage;
		
		private EntityRef<UserTheme> _UserTheme;
		
		private EntityRef<SecurityQuestionMaster> _SecurityQuestionMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PasswordChanging(string value);
    partial void OnUser_PasswordChanged();
    partial void OnUser_TypeChanging(string value);
    partial void OnUser_TypeChanged();
    partial void OnSecurity_Question_IDChanging(System.Nullable<int> value);
    partial void OnSecurity_Question_IDChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnLast_LoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_LoginChanged();
    partial void OnUser_StatusChanging(string value);
    partial void OnUser_StatusChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public UserMaster()
		{
			this._FriendMasters = new EntitySet<FriendMaster>(new Action<FriendMaster>(this.attach_FriendMasters), new Action<FriendMaster>(this.detach_FriendMasters));
			this._FriendRequests = new EntitySet<FriendRequest>(new Action<FriendRequest>(this.attach_FriendRequests), new Action<FriendRequest>(this.detach_FriendRequests));
			this._GroupMasters = new EntitySet<GroupMaster>(new Action<GroupMaster>(this.attach_GroupMasters), new Action<GroupMaster>(this.detach_GroupMasters));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._ImageComments = new EntitySet<ImageComment>(new Action<ImageComment>(this.attach_ImageComments), new Action<ImageComment>(this.detach_ImageComments));
			this._RequestMasters = new EntitySet<RequestMaster>(new Action<RequestMaster>(this.attach_RequestMasters), new Action<RequestMaster>(this.detach_RequestMasters));
			this._UserAddress = default(EntityRef<UserAddress>);
			this._UserDetail = default(EntityRef<UserDetail>);
			this._UserImage = default(EntityRef<UserImage>);
			this._UserTheme = default(EntityRef<UserTheme>);
			this._SecurityQuestionMaster = default(EntityRef<SecurityQuestionMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50)")]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Password", DbType="VarChar(50)")]
		public string User_Password
		{
			get
			{
				return this._User_Password;
			}
			set
			{
				if ((this._User_Password != value))
				{
					this.OnUser_PasswordChanging(value);
					this.SendPropertyChanging();
					this._User_Password = value;
					this.SendPropertyChanged("User_Password");
					this.OnUser_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Type", DbType="VarChar(20)")]
		public string User_Type
		{
			get
			{
				return this._User_Type;
			}
			set
			{
				if ((this._User_Type != value))
				{
					this.OnUser_TypeChanging(value);
					this.SendPropertyChanging();
					this._User_Type = value;
					this.SendPropertyChanged("User_Type");
					this.OnUser_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question_ID", DbType="Int")]
		public System.Nullable<int> Security_Question_ID
		{
			get
			{
				return this._Security_Question_ID;
			}
			set
			{
				if ((this._Security_Question_ID != value))
				{
					if (this._SecurityQuestionMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurity_Question_IDChanging(value);
					this.SendPropertyChanging();
					this._Security_Question_ID = value;
					this.SendPropertyChanged("Security_Question_ID");
					this.OnSecurity_Question_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(MAX)")]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Login", DbType="DateTime")]
		public System.Nullable<System.DateTime> Last_Login
		{
			get
			{
				return this._Last_Login;
			}
			set
			{
				if ((this._Last_Login != value))
				{
					this.OnLast_LoginChanging(value);
					this.SendPropertyChanging();
					this._Last_Login = value;
					this.SendPropertyChanged("Last_Login");
					this.OnLast_LoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Status", DbType="VarChar(2)")]
		public string User_Status
		{
			get
			{
				return this._User_Status;
			}
			set
			{
				if ((this._User_Status != value))
				{
					this.OnUser_StatusChanging(value);
					this.SendPropertyChanging();
					this._User_Status = value;
					this.SendPropertyChanged("User_Status");
					this.OnUser_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_FriendMaster", Storage="_FriendMasters", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<FriendMaster> FriendMasters
		{
			get
			{
				return this._FriendMasters;
			}
			set
			{
				this._FriendMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_FriendRequest", Storage="_FriendRequests", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<FriendRequest> FriendRequests
		{
			get
			{
				return this._FriendRequests;
			}
			set
			{
				this._FriendRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_GroupMaster", Storage="_GroupMasters", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<GroupMaster> GroupMasters
		{
			get
			{
				return this._GroupMasters;
			}
			set
			{
				this._GroupMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_GroupMember", Storage="_GroupMembers", ThisKey="User_ID", OtherKey="Friend_ID")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_ImageComment", Storage="_ImageComments", ThisKey="User_ID", OtherKey="Friend_ID")]
		public EntitySet<ImageComment> ImageComments
		{
			get
			{
				return this._ImageComments;
			}
			set
			{
				this._ImageComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_RequestMaster", Storage="_RequestMasters", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<RequestMaster> RequestMasters
		{
			get
			{
				return this._RequestMasters;
			}
			set
			{
				this._RequestMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserAddress", Storage="_UserAddress", ThisKey="User_ID", OtherKey="User_ID", IsUnique=true, IsForeignKey=false)]
		public UserAddress UserAddress
		{
			get
			{
				return this._UserAddress.Entity;
			}
			set
			{
				UserAddress previousValue = this._UserAddress.Entity;
				if (((previousValue != value) 
							|| (this._UserAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAddress.Entity = null;
						previousValue.UserMaster = null;
					}
					this._UserAddress.Entity = value;
					if ((value != null))
					{
						value.UserMaster = this;
					}
					this.SendPropertyChanged("UserAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserDetail", Storage="_UserDetail", ThisKey="User_ID", OtherKey="User_ID", IsUnique=true, IsForeignKey=false)]
		public UserDetail UserDetail
		{
			get
			{
				return this._UserDetail.Entity;
			}
			set
			{
				UserDetail previousValue = this._UserDetail.Entity;
				if (((previousValue != value) 
							|| (this._UserDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDetail.Entity = null;
						previousValue.UserMaster = null;
					}
					this._UserDetail.Entity = value;
					if ((value != null))
					{
						value.UserMaster = this;
					}
					this.SendPropertyChanged("UserDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserImage", Storage="_UserImage", ThisKey="User_ID", OtherKey="User_ID", IsUnique=true, IsForeignKey=false)]
		public UserImage UserImage
		{
			get
			{
				return this._UserImage.Entity;
			}
			set
			{
				UserImage previousValue = this._UserImage.Entity;
				if (((previousValue != value) 
							|| (this._UserImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserImage.Entity = null;
						previousValue.UserMaster = null;
					}
					this._UserImage.Entity = value;
					if ((value != null))
					{
						value.UserMaster = this;
					}
					this.SendPropertyChanged("UserImage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserTheme", Storage="_UserTheme", ThisKey="User_ID", OtherKey="User_ID", IsUnique=true, IsForeignKey=false)]
		public UserTheme UserTheme
		{
			get
			{
				return this._UserTheme.Entity;
			}
			set
			{
				UserTheme previousValue = this._UserTheme.Entity;
				if (((previousValue != value) 
							|| (this._UserTheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTheme.Entity = null;
						previousValue.UserMaster = null;
					}
					this._UserTheme.Entity = value;
					if ((value != null))
					{
						value.UserMaster = this;
					}
					this.SendPropertyChanged("UserTheme");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SecurityQuestionMaster_UserMaster", Storage="_SecurityQuestionMaster", ThisKey="Security_Question_ID", OtherKey="Security_Question_ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SecurityQuestionMaster SecurityQuestionMaster
		{
			get
			{
				return this._SecurityQuestionMaster.Entity;
			}
			set
			{
				SecurityQuestionMaster previousValue = this._SecurityQuestionMaster.Entity;
				if (((previousValue != value) 
							|| (this._SecurityQuestionMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SecurityQuestionMaster.Entity = null;
						previousValue.UserMasters.Remove(this);
					}
					this._SecurityQuestionMaster.Entity = value;
					if ((value != null))
					{
						value.UserMasters.Add(this);
						this._Security_Question_ID = value.Security_Question_ID;
					}
					else
					{
						this._Security_Question_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SecurityQuestionMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FriendMasters(FriendMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_FriendMasters(FriendMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
		
		private void attach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
		
		private void attach_GroupMasters(GroupMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_GroupMasters(GroupMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
		
		private void attach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
		
		private void attach_RequestMasters(RequestMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = this;
		}
		
		private void detach_RequestMasters(RequestMaster entity)
		{
			this.SendPropertyChanging();
			entity.UserMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTheme")]
	public partial class UserTheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private System.Nullable<int> _Theme_ID;
		
		private System.Nullable<System.DateTime> _Update_Date;
		
		private EntityRef<ThemeMaster> _ThemeMaster;
		
		private EntityRef<UserMaster> _UserMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnTheme_IDChanging(System.Nullable<int> value);
    partial void OnTheme_IDChanged();
    partial void OnUpdate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdate_DateChanged();
    #endregion
		
		public UserTheme()
		{
			this._ThemeMaster = default(EntityRef<ThemeMaster>);
			this._UserMaster = default(EntityRef<UserMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme_ID", DbType="Int")]
		public System.Nullable<int> Theme_ID
		{
			get
			{
				return this._Theme_ID;
			}
			set
			{
				if ((this._Theme_ID != value))
				{
					if (this._ThemeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTheme_IDChanging(value);
					this.SendPropertyChanging();
					this._Theme_ID = value;
					this.SendPropertyChanged("Theme_ID");
					this.OnTheme_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Update_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Update_Date
		{
			get
			{
				return this._Update_Date;
			}
			set
			{
				if ((this._Update_Date != value))
				{
					this.OnUpdate_DateChanging(value);
					this.SendPropertyChanging();
					this._Update_Date = value;
					this.SendPropertyChanged("Update_Date");
					this.OnUpdate_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemeMaster_UserTheme", Storage="_ThemeMaster", ThisKey="Theme_ID", OtherKey="Theme_ID", IsForeignKey=true)]
		public ThemeMaster ThemeMaster
		{
			get
			{
				return this._ThemeMaster.Entity;
			}
			set
			{
				ThemeMaster previousValue = this._ThemeMaster.Entity;
				if (((previousValue != value) 
							|| (this._ThemeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThemeMaster.Entity = null;
						previousValue.UserThemes.Remove(this);
					}
					this._ThemeMaster.Entity = value;
					if ((value != null))
					{
						value.UserThemes.Add(this);
						this._Theme_ID = value.Theme_ID;
					}
					else
					{
						this._Theme_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ThemeMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserMaster_UserTheme", Storage="_UserMaster", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserMaster UserMaster
		{
			get
			{
				return this._UserMaster.Entity;
			}
			set
			{
				UserMaster previousValue = this._UserMaster.Entity;
				if (((previousValue != value) 
							|| (this._UserMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserMaster.Entity = null;
						previousValue.UserTheme = null;
					}
					this._UserMaster.Entity = value;
					if ((value != null))
					{
						value.UserTheme = this;
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
